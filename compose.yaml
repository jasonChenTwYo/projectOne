# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:

  backend:
    restart: always
    env_file:
      - .env
    build:
      context: backend
    networks:
      - frontnet
      - backend
    secrets:
      - mysql_password
    depends_on:
      mongodb:
        condition: service_started
      mysql:
        condition: service_healthy

  # https://hub.docker.com/_/mongo
  mongodb:
    image: mongo
    restart: always
    env_file:
      - .env
    volumes:
      - mongodb-data:/data/db
      - ./mongo/init:/docker-entrypoint-initdb.d
    networks:
      - backend
    secrets:
      - mongo_root_password
    ports:
      - 27017:27017

  # https://hub.docker.com/_/mysql
  mysql:
    image: mysql
    restart: always
    env_file:
      - .env
    # 避免 warning: World-writable config file my.cnf is ignored
    # mysql 會覺得這個文件會容易被修改，所以需要管制
    # 755  要更改目錄權限，以確保 MySQL 使用者和其所在群組具有讀取和執行權限。 
    # 644  要更改文件權限，確保配置文件對 MySQL 使用者和其所在群組可讀取，但其他使用者無法寫入。
    command: >
      bash -c "chmod 644 /etc/mysql/conf.d/my.cnf &&  
               chmod 755 /etc/mysql/conf.d &&
               docker-entrypoint.sh mysqld"  
    ports:
      - 3306:3306
    volumes:
      - db-data:/var/lib/mysql
      # docker hub mysql 文件說初次執行container時會執行 /docker-entrypoint-initdb.d 底下的 sql 檔案
      # 預設把 table 建立在 MYSQL_DATABASE 環境變數指定的 DATABASE , 如果有多個sql檔案就按檔名的字母順序執行
      # 參考文件: https://hub.docker.com/_/mysql 的 Initializing a fresh instance 章節
      - ./mysql/sqls:/docker-entrypoint-initdb.d
      # 亂碼問題 https://ithelp.ithome.com.tw/articles/10221541
      - ./mysql/conf:/etc/mysql/conf.d
    secrets:
      - mysql_root_password
      - mysql_password
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'mysqladmin ping -h 127.0.0.1 --password="$$(cat /run/secrets/mysql_root_password)" --silent'
        ]
      interval: 3s
      retries: 5
      start_period: 30s
    networks:
      - backend

  proxy:
    build: proxy
    restart: always
    ports:
      - 80:80
    depends_on:
      - backend
    networks:
      - frontnet
# 建立網路，建立網路後兩個container就可以用services中宣告的名字當去連線
# ex: 
# backend 容器中 flask 可以用mysql這個名稱當連線的host
# proxy 容器中 nginx 可以用backend這個名稱當做要proxy_pass的domain name
networks:
  frontnet:
  backend:
volumes:
  db-data:
  mongodb-data:
secrets:
  mysql_root_password:
    file: mysql/mysql_root_password.txt
  mysql_password:
    file: mysql/mysql_password.txt
  mongo_root_password:
    file: mongo/mongo_root_password.txt

# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker compose up`.
#     depends_on:
#       db:
#         condition: service_healthy
#   db:
#     image: postgres
#     restart: always
#     user: postgres
#     secrets:
#       - db-password
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=example
#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#     expose:
#       - 5432
#     healthcheck:
#       test: [ "CMD", "pg_isready" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
# volumes:
#   db-data:
# secrets:
#   db-password:
#     file: db/password.txt
